// Boostrap Mixins and Variables are defined first.
// Examples start at line 234.
//** Deprecated `$screen-lg` as of v3.0.1

$screen-lg:                  1200px !default;
$screen-lg-min:              $screen-lg !default;
//** Deprecated `$screen-lg-desktop` as of v3.0.1
$screen-lg-desktop:          $screen-lg-min !default;

// So media queries don't overlap when required, provide a maximum
$screen-xs-max:              ($screen-sm-min - 1) !default;
$screen-sm-max:              ($screen-md-min - 1) !default;
$screen-md-max:              ($screen-lg-min - 1) !default;


//== Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
$grid-columns:              12 !default;
//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:         30px !default;
// Navbar collapse
//** Point at which the navbar becomes uncollapsed.
$grid-float-breakpoint:     $screen-sm-min !default;
//** Point at which the navbar begins collapsing.
$grid-float-breakpoint-max: ($grid-float-breakpoint - 1) !default;


//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
$container-tablet:             (720px + $grid-gutter-width) !default;
//** For `$screen-sm-min` and up.
$container-sm:                 $container-tablet !default;

// Medium screen / desktop
$container-desktop:            (940px + $grid-gutter-width) !default;
//** For `$screen-md-min` and up.
$container-md:                 $container-desktop !default;

// Large screen / wide desktop
$container-large-desktop:      (1140px + $grid-gutter-width) !default;
//** For `$screen-lg-min` and up.
$container-lg:                 $container-large-desktop !default;

// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Colour column rows

[class*="col-"], .col {
  padding-top: 15px;
  padding-bottom: 15px;
  background-color: #eee;
  background-color: rgba(86,61,124,.15);
  border: 1px solid #ddd;
  border: 1px solid rgba(86,61,124,.2);
}

// Examples.

// Create rows
.three-equal-columns,
.three-unequal-columns,
.two-columns,
.two-columns-with-two-nested-columns,
.mixed-mobile-and-desktop,
.mixed-mobile-tablet-and-desktop,
.offset-push-and-pull-resets {

  @include make-row;

}

// Define columns.
// In a real app your classes should be sematic in that they would describe what you are laying out.
// If you use smart common classes you can end up writing minimal grid rules.

.three-equal-columns {

  .col {
    @include make-md-column(4);
  }

}

.three-unequal-columns {

  .col-3 {
    @include make-md-column(3);
  }

  .col-6 {
    @include make-md-column(6);
  }

}

.two-columns {

  .col-4 {
    @include make-md-column(4);
  }

  .col-8 {
    @include make-md-column(8);
  }

}

.two-columns-with-two-nested-columns {

  .col-8 {
    @include make-md-column(8);
  }

  .col-6 {
    @include make-md-column(6);
  }

  .col-4 {
    @include make-md-column(4);
  }

}

.mixed-mobile-and-desktop {

  // When you have rules for multiple breakpoints define the smaller screen first.
  .col-large {
    @include make-xs-column(12);
    @include make-md-column(8);
  }

  .col-medium {
    @include make-xs-column(6);
  }

  .col-small {
    @include make-xs-column(6);
    @include make-md-column(4);
  }

}

.mixed-mobile-tablet-and-desktop {

  .col-one {
    @include make-xs-column(12);
    @include make-sm-column(6);
    @include make-lg-column(8);
  }

  .col-two {
    @include make-xs-column(6);
    @include make-lg-column(4);
  }

  .col-three {
    @include make-xs-column(6);
    @include make-sm-column(4);
  }

}

.offset-push-and-pull-resets {

  .col-one {
    @include make-sm-column(5);
    @include make-md-column(6);
  }

  .col-two {
    @include make-sm-column(5);
    @include make-sm-column-offset(2);
    @include make-md-column(6);
    @include make-md-column-offset(0);

  }

  .col-three {
    @include make-sm-column(6);
    @include make-md-column(5);
    @include make-lg-column(6);
  }

  .col-four {
    @include make-sm-column(6);
    @include make-md-column(5);
    @include make-md-column-offset(2);
    @include make-lg-column(6);
    @include make-lg-column-offset(0);

  }

}

// GLOBAL COLORS
// -------------
$razorback-red : #9D2235;
$dream-big-red    : #FF5859;
$vac-purple : #842FA7;
$engagement-teal   : #1FCFCB;
$recovery-yellow : #F5BA0A;
$pantry-green  : #00B44E;
$literacy-blue   : #2A7DE2;

// DEFAULT BUTTON
// --------------
.btn {
  display: inline-block;
  padding : .5em 1.2em;
  border: 1px solid #fff;
  color: #fff;
  background-color: transparent;
  border-radius : 0;
  border-color : #F2F2F4;
  text-transform : uppercase;
  cursor : pointer;
  font-size : 1.2em;
  $white-space : nowrap;
  vertical-align : middle;
  line-height: 1.428571429;
  text-align : center;
  margin-bottom : 0;
  transition: all 0.3s ease-in-out;
  font-weight : 400;
}
.btn:hover, .btn:focus {
  border: 1px solid $white;
  outline: 0;
  color: rgb($white);
  background-color: rgba($white,0.1);
  color : $razorback-red;
  border-color : $razorback-red;
}
.btn:active {
  position:static;
  width:auto;
  height:auto;
}

// button color function
@mixin btn-theme($btn-color) {
  background-color : $btn-color;

  &:hover {
    background-color : $white;
    color : $btn-color;
    border-color : $btn-color;
  }
  &:active {
    position:static;
    width:auto;
    height:auto;
  }
  text: {
    text-transform : uppercase;
    font-family : "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-weight : 400;
  }
}

// default color
.razorback-red {
  @include btn-theme($razorback-red);
}
// dream big
.dream-big-red {
  @include btn-theme($dream-big-red);
}
// volunteer action center
.vac-purple {
  @include btn-theme($vac-purple);
}
// student engagement
.engagement-teal {
  @include btn-theme($engagement-teal);
}
// razorback food recovery
.recovery-yellow {
  @include btn-theme($recovery-yellow);
}
// full circle food pantry
.pantry-green {
  @include btn-theme($pantry-green);
}
// VAC literacy program
.literacy-blue {
  @include btn-theme($literacy-blue);
}

// call to action section
// ----------------------

.call-to-action($department-color) {
  background : $department-color;
  @include make-row();
  .content-primary {
    @include make-xs-column(12);
    @include make-sm-column(12);
  }

}

// css from the theme
// ------------------

// CONTENT SECTION STYLES
// ----------------------

.intro {
  display: table;
  width: 100%;
  height: auto;
  padding: 100px 100px;
  text-align: center;
  color: #fff;
  background: url("https://placekitten.com/g/1800/400") no-repeat bottom center scroll;
  background-color: #fff;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  background-size: cover;
  -o-background-size: cover;
}

.intro .intro-body {
  display: table-cell;
  vertical-align: middle;
}

.intro .intro-body .brand-heading {
  font-size: 30px;
  color: #fff;
}

.intro .intro-body .intro-text {
  font-size: 18px;
  color: #fff;
}

@media(min-width:768px) {
  .intro {
    height: 100%;
    padding: 0;
  }

  .intro .intro-body .brand-heading {
    font-size: 100px;
  }

  .intro .intro-body .intro-text {
    font-size: 26px;
  }
}


.content-section {
  padding-top: 100px;
}

.call-to-action-section {

  h1 .call-to-action{
    color : $white;
    text-transform : uppercase;
  }
  h2 {
    color: $white;
  }

  .btn-default {
    border: 1px solid $white;
    color: $white;
    background-color: transparent;
  }

  .btn-default:hover,
  .btn-default:focus {
    border: 1px solid rgb($white);
    outline: 0;
    color: rgb($white);
    background-color: rgba($white,0.1);
  }

  width: 100%;
  padding: 50px 0;
  color: #fff;
  background-color: rgb(157,34,53);
  -webkit-background-size: cover;
  -moz-background-size: cover;
  background-size: cover;
  -o-background-size: cover;
}

@media(min-width:767px) {
  .content-section {
    padding-top: 250px;
  }

  .call-to-action-section($department-color) {
    padding: 100px 0;
  }
}

.btn {
  border-radius: 0;
  color : $white;
  text-transform: uppercase;
  font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;
  font-weight: 400;
  -webkit-transition: all .3s ease-in-out;
  -moz-transition: all .3s ease-in-out;
  transition: all .3s ease-in-out;
}

.btn-default {
  border: 1px solid $white;
  color: $white;
  background-color: transparent;
}

.btn-default:hover,
.btn-default:focus {
  border: 1px solid $razorback-red;
  outline: 0;
  color: $white;
  background-color: $razorback-red;
}

ul.banner-social-buttons {
  margin-top: 0;
}

@media(max-width:1199px) {
  ul.banner-social-buttons {
    margin-top: 15px;
  }
}

@media(max-width:767px) {
  ul.banner-social-buttons li {
    display: block;
    margin-bottom: 20px;
    padding: 0;
  }

  ul.banner-social-buttons li:last-child {
    margin-bottom: 0;
  }
}


::-moz-selection {
  text-shadow: none;
  background: #fcfcfc;
  background: rgba(255,255,255,.2);
}

::selection {
  text-shadow: none;
  background: #fcfcfc;
  background: rgba(255,255,255,.2);
}

img::selection {
  background: 0 0;
}

img::-moz-selection {
  background: 0 0;
}

body {
  webkit-tap-highlight-color: rgba(255,255,255,.2);
}

.tint {
  position: relative;
  float: left;
  margin-right: 20px;
  margin-bottom: 20px;
  cursor: pointer;
  box-shadow: rgba(0,0,0,.2) 3px 5px 5px;

}

.tint:before {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0,255,255, 0.5);
  transition: all .3s linear;
}

.tint:hover:before { background: none; }

.tint:before { background: rgba($razorback-red, 0.5); }
.t3:before { background: rgba($dream-big-red, 0.85); }
.t4:before { background: rgba($vac-purple, 0.5); }
.t5:before { background: rgba($engagement-teal, 0.5); }
.t6:before { background: rgba($recovery-yellow, 0.6); }
.t7:before { background: rgba($pantry-green, 0.6); }
.t8:before { background: rgba($literacy-blue, 0.6); }

